(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{478:function(t,e,a){t.exports=a.p+"assets/img/thi30.4fc84191.png"},653:function(t,e,a){"use strict";a.r(e);var s=a(62),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",[t._v(" 第十章 日期和时间 ")]),t._v(" "),s("p",[t._v("这一组函数用于处理 日期时间 类型数据(即一个整数，表示从1970.1.1 0:00时开始的秒数)。")]),t._v(" "),s("p",[t._v("要安排更高精度的计数器和计时器，可以使用GetTickCount()函数，它以毫秒为单位。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("函数")]),t._v(" "),s("th",[t._v("功能")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("TimeCurrent")]),t._v(" "),s("td",[t._v("返回最后一个已知的服务器时间，为 日期时间 类型(最后一次报价的时间)")])]),t._v(" "),s("tr",[s("td",[t._v("TimeTradeServer")]),t._v(" "),s("td",[t._v("返回交易服务器当前的计算机时间")])]),t._v(" "),s("tr",[s("td",[t._v("TimeLocal")]),t._v(" "),s("td",[t._v("返回本地计算机的时间")])]),t._v(" "),s("tr",[s("td",[t._v("TimeGMT")]),t._v(" "),s("td",[t._v("以本地计算机的时间计算出GMT时间，考虑夏令时")])]),t._v(" "),s("tr",[s("td",[t._v("TimeDaylightSavings")]),t._v(" "),s("td",[t._v("返回夏令时的开关标帜")])]),t._v(" "),s("tr",[s("td",[t._v("TimeGMTOffset")]),t._v(" "),s("td",[t._v("在考虑夏令时的情况下，以秒为单位返回当前GMT时间 和 本地计算机时间之间的差异")])]),t._v(" "),s("tr",[s("td",[t._v("TimeToStruct")]),t._v(" "),s("td",[t._v("将 日期时间 值转换为MqlDateTime结构类型的变量")])]),t._v(" "),s("tr",[s("td",[t._v("StructToTime")]),t._v(" "),s("td",[t._v("将MqlDateTime结构类型的变量转换为 日期时间 值")])])])]),t._v(" "),s("h2",{attrs:{id:"_10-1-timecurrent"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-timecurrent"}},[t._v("#")]),t._v(" 10.1 TimeCurrent")]),t._v(" "),s("p",[t._v('返回最后访问的服务器时间，在“市场报价”窗口中选定的交易品种的最后一次报价的时间。在OnTick()处理程序中，该函数将返回已接收处理的时间。在其他情况下(例如，在处理程序OnInit()、OnDeinit()、OnTimer()等)，对于在"市场报价"窗口中的任何一个 交易品种 都有最后一个报价时间，时间在窗口标题上显示。这个时间值在交易服务器上形成，并不依靠你的电脑时间设置。此函数有两种调用方式。')]),t._v(" "),s("p",[s("img",{attrs:{src:a(478),alt:"IMG_256"}})]),t._v(" "),s("p",[t._v("调用时无参数")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("datetime  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("TimeCurrent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("调用时，带MqlDateTime类型参量")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("datetime  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("TimeCurrent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" \n   Mqldatetime"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("  dt_struct      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结构类型变量 ")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("参数\ndt_struct")]),t._v(" "),s("p",[t._v("[out] MqlDateTime 结构类型变量")]),t._v(" "),s("p",[t._v("返回值\n日期时间 类型值")]),t._v(" "),s("p",[t._v("注意\n如果将MqlDateTime结构类型变量作为参数传递，则会相应地填充它。\n要安排高精度的计数器和计时器，可以使用GetTickCount()函数，它以毫秒为单位。\n在策略测试器中，根据历史数据对TimeCurrent()进行了模拟。")]),t._v(" "),s("h2",{attrs:{id:"_10-2-timetradeserver"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-timetradeserver"}},[t._v("#")]),t._v(" 10.2 TimeTradeServer")]),t._v(" "),s("p",[t._v("返回计算出的交易服务器的当前时间。与TimeCurrent()不同，时间值的计算在客户机端执行，取决于计算机上的时间设置。此函数有两种调用方式。\n调用时无参数")]),t._v(" "),s("p",[s("code",[t._v("datetime TimeTradeServer();")])]),t._v(" "),s("p",[t._v("调用时，带MqlDateTime类型参量")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("datetime  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("TimeTradeServer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" \n   Mqldatetime"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("  dt_struct      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结构类型变量 ")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("参数\ndt_struct")]),t._v(" "),s("p",[t._v("[out] MqlDateTime 结构类型变量")]),t._v(" "),s("p",[t._v("返回值\n日期时间 类型值")]),t._v(" "),s("p",[t._v("注意\n如果将MqlDateTime结构类型变量作为参数传递，则会相应地填充它。\n要安排高精度的计数器和计时器，可以使用GetTickCount()函数，它以毫秒为单位。\n在策略测试器中，根据历史数据对TimeCurrent()进行了模拟。")]),t._v(" "),s("h2",{attrs:{id:"_10-3-timelocal"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-timelocal"}},[t._v("#")]),t._v(" 10.3 TimeLocal")]),t._v(" "),s("p",[t._v("返回客户端运行的电脑上的本地时间，此函数有两种调用方式。\n调用时无参数")]),t._v(" "),s("p",[s("code",[t._v("datetime TimeLocal();")])]),t._v(" "),s("p",[t._v("调用时，带MqlDateTime类型参量")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("datetime  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("TimeLocal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" \n   Mqldatetime"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("  dt_struct      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结构类型变量 ")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("参数\ndt_struct")]),t._v(" "),s("p",[t._v("[out] MqlDateTime 结构类型变量")]),t._v(" "),s("p",[t._v("返回值\n日期时间 类型值")]),t._v(" "),s("p",[t._v("注意\n如果将MqlDateTime结构类型变量作为参数传递，则会相应地填充它。\n要安排高精度的计数器和计时器，可以使用GetTickCount()函数，它以毫秒为单位。\n在策略测试器中，TimeLocal()总是相当于模拟服务器时间的 TimeCurrent() 。")]),t._v(" "),s("h2",{attrs:{id:"_10-4-timegmt"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-4-timegmt"}},[t._v("#")]),t._v(" 10.4 TimeGMT")]),t._v(" "),s("p",[t._v("返回GMT时间，这其中考虑了客户端本地时间，包含夏令时DST开关。此函数有两种调用方式。\n调用时无参数")]),t._v(" "),s("p",[s("code",[t._v("datetime TimeGMT();")])]),t._v(" "),s("p",[t._v("调用时，带MqlDateTime类型参量")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("datetime  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("TimeGMT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" \n   Mqldatetime"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("  dt_struct      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结构类型变量 ")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("参数\ndt_struct")]),t._v(" "),s("p",[t._v("[out] MqlDateTime 结构类型变量")]),t._v(" "),s("p",[t._v("返回值\n日期时间 类型值")]),t._v(" "),s("p",[t._v("注意\n如果将MqlDateTime结构类型变量作为参数传递，则会相应地填充它\n。 要安排高精度的计数器和计时器，可以使用GetTickCount()函数，它以毫秒为单位。\n在策略测试器中，TimeGMT() 总是相当于模拟服务器时间的 TimeTradeServer()。")]),t._v(" "),s("h2",{attrs:{id:"_10-5-timedaylightsaving"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-5-timedaylightsaving"}},[t._v("#")]),t._v(" 10.5 TimeDaylightSaving")]),t._v(" "),s("p",[t._v("如果已切换到夏令时，则以秒为单位，返回对夏令时的校正。这取决于你电脑的时间设置。")]),t._v(" "),s("p",[s("code",[t._v("int TimeDaylightSavings();")])]),t._v(" "),s("p",[t._v("返回值\n如果转换成冬季(标准)时间，则返回0。")]),t._v(" "),s("h2",{attrs:{id:"_10-6-timegmtoffset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-6-timegmtoffset"}},[t._v("#")]),t._v(" 10.6 TimeGMTOffset")]),t._v(" "),s("p",[t._v("返回当前GMT时间和本地计算机时间之间的时间差，考虑冬季(标准)或夏令时的切换。取决于你电脑的时间设置。")]),t._v(" "),s("p",[s("code",[t._v("int TimeGMTOffset();")])]),t._v(" "),s("p",[t._v("返回值\n整数型 数值，以秒为单位。计算GMT 时间和本地电脑时间之间的差异。")]),t._v(" "),s("p",[s("code",[t._v("TimeGMTOffset() = TimeGMT() - TimeLocal()")])]),t._v(" "),s("h2",{attrs:{id:"_10-7-timetostruct"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-7-timetostruct"}},[t._v("#")]),t._v(" 10.7 TimeToStruct")]),t._v(" "),s("p",[t._v("转变 日期时间 类型的值(数字从1970.01.01以秒开始)到结构变量 MqlDateTime 中。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("TimeToStruct")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" \n   datetime      dt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 日期时间 ")]),t._v("\n   Mqldatetime"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("  dt_struct      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 采用值的结构 ")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("参数\ndt")]),t._v(" "),s("p",[t._v("[in] 用于转换的数值。")]),t._v(" "),s("p",[t._v("dt_struct")]),t._v(" "),s("p",[t._v("[out] 结构类型MqlDateTime变量")]),t._v(" "),s("p",[t._v("返回值\n如果成功返回true，否则false。若要获得有关错误的信息，请调用GetLastError() 函数。")]),t._v(" "),s("h2",{attrs:{id:"_10-8-structtotime"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-8-structtotime"}},[t._v("#")]),t._v(" 10.8 StructToTime")]),t._v(" "),s("p",[t._v("转变结构变量 MqlDateTime 到 日期时间 类型值，然后返回结果值。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("datetime  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("StructToTime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" \n   MqlDateTime"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("  dt_struct      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 日期和时间结构 ")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("参数\ndt_struct")]),t._v(" "),s("p",[t._v("[in] 结构类型变量MqlDateTime。")]),t._v(" "),s("p",[t._v("返回值\n日期时间型的值包括从01.01.1970起的以秒为单位的数值。")])])}),[],!1,null,null,null);e.default=n.exports}}]);